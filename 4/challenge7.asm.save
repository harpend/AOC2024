%include "linux64.inc"

section .data
	filename db "input4.txt",0

section .bss
	char resb 1
	counter resq 1
section .text
	global _start
_start:
	mov rax, SYS_OPEN
	mov rdi, filename
	mov rsi, O_RDONLY
	mov rdx, 0
	syscall

	mov rbx, rax
	xor rax, rax
	mov [counter], rax
_loop:
	call _readChar
	cmp rax, 0
	je _end
	jmp _loop

_end:
	call _printCounter
	mov rax, SYS_CLOSE
	pop rdi
	syscall

	mov rax, 60
	xor rdi, rdi
	syscall

_readChar:
	mov rdi, rbx
	mov rax, SYS_READ
	mov rsi, char
	mov rdx, 1
	syscall
	ret

_printChar:
	mov rax, SYS_WRITE
	mov rdi, 1
	mov rsi, char
	mov rdx, 1
	syscall
	ret

_printCounter:
	mov rax, [counter]
	xor rbx, rbx
	mov rcx, 10

_printDigit:
	xor rdx, rdx
	div rcx
	add dl, '0'
	push rdx
	inc rbx
	test rax, rax
	jnz _printDigit
	ret
_matchX:
	mov rax, [char]
	cmp rax, 120
	je _matchM
	ret

_matchM:
	call _readChar
	cmp rax, 0
	je _end

	mov rax, char
	cmp rax, 109
	je _matchA
	cmp rax, 120
	je _matchX
	ret

_matchA:
	call _readChar
	cmp rax, 0
	je _end

	mov rax, char
	cmp rax, 97
	je _matchS
	cmp rax, 120
	je _matchX
	ret

_matchS:
	call _readChar
	cmp rax, 0
	je _end

	mov rax, char
	cmp rax, 115
	je _increment
	cmp rax, 120
	je _matchX
	ret

_increment:
	push rax
	mov rax, [counter]
	inc rax
	mov [counter], rax
	pop rax
	ret

  GNU nano 6.2                                                                                      challenge7.asm                                                                                               %include "linux64.inc"

section .data
        filename db "input4.txt",0

section .bss
        char resb 1
        counter resq 1
section .text
        global _start
_start:
        mov rax, SYS_OPEN
        mov rdi, filename
        mov rsi, O_RDONLY
        mov rdx, 0
        syscall

        mov rbx, rax
        xor rax, rax
        mov [counter], rax
_loop:
        call _readChar
        cmp rax, 0
        je _end
        jmp _loop

_end:
        call _printCounter
        mov rax, SYS_CLOSE
        pop rdi
        syscall

        mov rax, 60
        xor rdi, rdi
        syscall

_readChar:
        mov rdi, rbx
        mov rax, SYS_READ
        mov rsi, char
        mov rdx, 1
        syscall
        ret

_printChar:
        mov rax, SYS_WRITE
 
